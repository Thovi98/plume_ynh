#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source detect_arch
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
    ynh_clean_check_starting
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url="/"
admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC
password=$YNH_APP_ARG_PASSWORD
instance_name=$YNH_APP_ARG_NAME
registration=$YNH_APP_ARG_REGISTRATION
admin_email=$(ynh_user_get_info $admin 'mail')
secret_key=$(ynh_string_random 32 | base64)

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_print_info "Validating installation parameters..."

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Register (book) web path
ynh_webpath_register $app $domain $path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_print_info "Storing installation settings..."

ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path_url
ynh_app_setting_set $app admin $admin
ynh_app_setting_set $app is_public $is_public

ynh_app_setting_set $app instance $instance_name
ynh_app_setting_set $app registration $registration
ynh_app_setting_set $app admin_email $admin_email
ynh_app_setting_set $app secret_key $secret_key

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_print_info "Configuring firewall ..."

# Find a free port
port=$(ynh_find_port 8095)

ynh_app_setting_set $app port $port

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_print_info "Installing dependencies ..."

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE A POSTGRESQL DATABASE
#=================================================
ynh_print_info "Creating a PostgreSQL database..."

ynh_psql_test_if_first_run
db_name=$(ynh_sanitize_dbid $app)
db_pwd=$(ynh_string_random 30)
ynh_app_setting_set $app db_name $db_name
ynh_app_setting_set "$app" db_pwd "$db_pwd"
ynh_psql_create_user "$db_name" "$db_pwd"
ynh_psql_execute_as_root "CREATE DATABASE $db_name ENCODING 'UTF8' LC_COLLATE='C' LC_CTYPE='C' template=template0 OWNER $db_name;"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_print_info "Setting up source files ..."

ynh_app_setting_set $app final_path $final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path/$app" $architecture

# Create the media directory, where uploads will be stored
mkdir -p $final_path/media

# Create the cargo directory
mkdir -p $final_path/.cargo/bin

# Move binaries
mv $final_path/$app/bin/* $final_path/.cargo/bin/
chmod +x $final_path/.cargo/bin/*

# Remove empty bin directory
ynh_secure_remove $final_path/$app/bin/

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_print_info "Configuring nginx web server..."

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_print_info "Configuring system user ..."

# Create a system user
ynh_system_user_create $app "$final_path"

#=================================================
# SPECIFIC SETUP
#=================================================
# CREATE LOG FOLDER
#=================================================

mkdir -p "/var/log/$app"
chown -R "$app":"$app" "/var/log/$app"

#=================================================
# MODIFY A CONFIG FILE
#=================================================

# setup application config
cp "../conf/.env" "$final_path/$app/.env"
ynh_replace_string "__DB_NAME__"     "$db_name"    "$final_path/$app/.env"
ynh_replace_string "__DB_PWD__"    "$db_pwd"     "$final_path/$app/.env"
ynh_replace_string "__DOMAIN__"     "$domain"     "$final_path/$app/.env"
ynh_replace_string "__PORT__"       "$port"       "$final_path/$app/.env"
ynh_replace_string "__SECRET_KEY__"        "$secret_key" "$final_path/$app/.env"

#=================================================
# MAKE SETUP
#=================================================

# Fix missing Cargo.toml
cp "../conf/Cargo.toml" "$final_path/$app/Cargo.toml"

# Set right permissions 
chown -R "$app":"$app" $final_path

export PATH="$PATH:$final_path/.cargo/bin:$final_path/.local/bin:/usr/local/sbin" 

pushd $final_path/$app
    sudo -u "$app" env PATH=$PATH diesel migration run

    # Add new instance
    if [ $registration -eq 1 ]
    then
         sudo -u "$app" env PATH=$PATH plm instance new  --domain "$domain" --name "$instance_name" -l 'CC-BY'
    else
         sudo -u "$app" env PATH=$PATH plm instance new --private --domain "$domain" --name "$instance_name" -l 'CC-BY'
    fi

    # Add admin user
    sudo -u "$app" env PATH=$PATH plm users new --admin -n "$admin" -N "$admin"  --email "$admin_email" --password "$password"

    # Initialise search index
    sudo -u "$app" env PATH=$PATH plm search init -p $final_path/$app
popd

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_print_info "Configuring a systemd service ..."

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum "$final_path/$app/.env"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions to app files
chown -R $app: $final_path

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_print_info "Configuring log rotation ..."

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

#=================================================
# ADVERTISE SERVICE IN ADMIN PANEL
#=================================================

yunohost service add $app --description "$app daemon for XXX" --log "/var/log/$app/$app.log"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_print_info "Configuring SSOwat ..."

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway.
	ynh_app_setting_set $app unprotected_uris "/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_print_info "Reloading nginx web server..."

systemctl reload nginx

#=================================================
# START SERVICE
#=================================================

ynh_systemd_action --action=start --service_name=$app

#=================================================
# END OF SCRIPT
#=================================================

ynh_print_info "Installation of $app completed"
